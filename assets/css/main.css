@import url("https://fonts.googleapis.com/css2?family=Overpass:wght@400;700&display=swap");

body {
  font-family: "Outfit", sans-serif;
}

:root {
  --White: hsl(0, 0%, 100%);
  --Light-Grey: hsl(217, 12%, 63%);
  --Medium-Grey: hsl(216, 12%, 54%);
  --Dark-Blue: hsl(213, 19%, 18%);
  --Very-Dark-Blue: hsl(216, 12%, 8%);
  --Orange: #fc7613;
}

main {
  display: grid;
  place-items: center;
  /* assim o componente fica centralizado 
    na tela visível */
  height: 100vh;
}

.card {
  height: 400px;
  width: 400px;
  background-color: var(--Very-Dark-Blue);
  border-radius: 30px;
  border-right: 40px;
  box-sizing: border-box;
}

.circle {
  display: flex;
  place-items: center;
  justify-content: center;
  margin-top: 40px;
  height: 40px;
  width: 40px;
  margin-left: 30px;
  background-color: var(--Dark-Blue);
  border-radius: 50%;
}

.number-area {
  display: flex;
  justify-content: center;
  place-items: center;
}

.number {
  display: flex;
  justify-content: center;
  place-items: center;
  /* como vc tem um
  container que envolve os filhos com a classe '.number', 
  você poderia ter aplicado a margin-top diretamente no wrapper.
  */
  margin-top: 40px;
  height: 40px;
  width: 40px;
  margin-top: 30px;
  margin-left: 15px;
  margin-right: 15px;
  background-color: var(--Dark-Blue);
  border-radius: 50%;
  cursor: pointer;
  color: var (--Medium-Grey);
}

.number p {
  color: var(--Light-Grey);
}

.active p {
  color: var(--White);
}

.active {
  background-color: var(--Orange);
}

/* Além do estado `active` temos dois outros estados importantes
pra usabilidade: hover e focus.

Com o hover você informa que o usuário pode interagir com aquele
elemento. 

E com o focus informa que aquele elemento está selecionado

https://developer.mozilla.org/en-US/docs/Web/CSS/:hover
*/

.p {
  color: var (--Medium-Grey);
}

.icon-star {
  justify-content: center;
  max-width: 100%;
  max-height: 100%;
}

.circle-area {
  display: flex;
  justify-content: center;
}

.circle-numbers {
  background-color: var(--Dark-Blue);
  border-radius: 50%;
}

.h1-card-1 {
  /* 
Sempre quando se tratar de espaçamentos e fontes
é uma boa prática utilizarmos REM ao invés de pixels.

Nesse vídeo do Kevin Powell ele demonstra alguns use cases.

https://www.youtube.com/watch?v=N5wpD9Ov_To&ab_channel=KevinPowell
*/
  margin-left: 30px;
  margin-right: 30px;
  color: var(--White);
  font-weight: 700;
}

.p-card-1 {
  margin-left: 30px;
  margin-right: 30px;
  text-align: inline;
  color: var(--Medium-Grey);
  font-weight: 400;
  max-inline-size: 320px;
  font-size: 15px;
}

.submit {
  margin-top: 20px;
  margin-left: 30px;
  margin-right: 30px;
  font-weight: 700;
  background-color: var(--Orange);
  border-radius: 15px;
  max-inline-size: 320px;
  padding: 1rem;
  text-align: center;
  /* Cuidado ao sobrescrever valores de propriedades.
  Pode deixar o código um pouco confuso e causar efeitos inesperados
  */
  padding: 0.5rem;
  letter-spacing: 0.6em;
}

.submit:hover {
  background-color: var(--White);
  color: var(--Orange);
  cursor: pointer;
}

.img-card-2 {
  justify-content: center;
  margin-top: 60px;
  margin-left: 100px;
}

.report {
  justify-content: center;
  color: #fc7613;
  margin-top: 20px;
  margin-left: 65px;
  margin-right: 30px;
  font-weight: 400px;
  background-color: var(--Dark-Blue);
  border-radius: 15px;
  max-inline-size: 250px;
  padding: 1rem;
  text-align: center;
  padding: 0.3rem;
}

.h1-card-2 {
  margin-left: 30px;
  margin-right: 30px;
  color: var(--White);
  font-weight: 700;
  text-align: center;
}

.p-card-2 {
  margin-left: 30px;
  margin-right: 30px;
  text-align: center;
  color: var(--Medium-Grey);
  font-weight: 400;
  max-inline-size: 320px;
  font-size: 15px;
}
